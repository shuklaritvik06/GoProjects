package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/shuklaritvik06/GO_GRAPHQL/graph/model"
)

// CreateEmployee is the resolver for the createEmployee field.
func (r *mutationResolver) CreateEmployee(ctx context.Context, input model.NewEmployee) (*model.Employee, error) {
	rand, _ := rand.Int(rand.Reader, big.NewInt(100))
	employee := &model.Employee{
		ID:     fmt.Sprintf("E%d", rand),
		Name:   input.Name,
		Age:    input.Age,
		Salary: input.Salary,
	}
	return employee, nil
}

// CreateDepartment is the resolver for the createDepartment field.
func (r *mutationResolver) CreateDepartment(ctx context.Context, input model.NewDepartment) (*model.Department, error) {
	rand, _ := rand.Int(rand.Reader, big.NewInt(100))
	department := &model.Department{
		DeptName: input.DeptName,
		ID:       fmt.Sprintf("D%d", rand),
	}
	return department, nil
}

// UpdateEmployee is the resolver for the updateEmployee field.
func (r *mutationResolver) UpdateEmployee(ctx context.Context, id string, input model.NewEmployee) (*model.Employee, error) {
	panic(fmt.Errorf("not implemented"))
}

// DeleteEmployee is the resolver for the deleteEmployee field.
func (r *mutationResolver) DeleteEmployee(ctx context.Context, id string) (*model.Employee, error) {
	panic(fmt.Errorf("not implemented: DeleteEmployee - deleteEmployee"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
